import { Router, Request, Response } from 'express';
import {
    deleteMessageFromDatabase,
    getMessageFromDatabase,
    getMessagesFromDatabase,
    insertMessageToDatabase,
    updateMessageInDatabase,
} from './database';
import { getIdFromRequest, getMessageFromRequestBody } from './utils/expressUtils';
import { MessageDTO } from '@app-types/MessageDTO';
const swaggerUi = require('swagger-ui-express');
const swaggerJsdoc = require('swagger-jsdoc');

const router = Router();

const options = {
    swaggerDefinition: {
        openapi: '3.0.0',
        info: {
            title: 'API for company assignment',
            version: '1.0.0',
            description: 'Autogenerated swagger doc for the assignment messages API',
        },
        components: {},
    },
    apis: ['./src/routes.ts'],
};
const specs = swaggerJsdoc(options);
router.use('/api-docs', swaggerUi.serve);
router.get('/api-docs', swaggerUi.setup(specs));

/**
 * @swagger
 * components:
 *   schemas:
 *     Message:
 *       type: object
 *       properties:
 *         message:
 *           type: string
 *     MessageDTO:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *         message:
 *           type: string
 *         palindrome:
 *           type: boolean
 *         created_at:
 *           type: string
 *           format: date-time
 *         updated_at:
 *           type: string
 *           format: date-time
 */

/**
 * @swagger
 * /messages/{id}:
 *   get:
 *     summary: Get a message by ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: The message ID
 *     responses:
 *       200:
 *         description: The message
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/MessageDTO'
 *       400:
 *         description: ID must exist or be a number
 *       404:
 *         description: Message not found
 */
router.get('/messages/:id', async (request: Request, response: Response<MessageDTO>) => {
    const id = getIdFromRequest(request);

    const messageDTO: MessageDTO = await getMessageFromDatabase(id);
    if (!messageDTO) {
        const error = new Error(`Message with id ${id} not found.`);
        (error as any).status = 404;
        throw error;
    }

    response.json(messageDTO);
});

/**
 * @swagger
 * /messages:
 *   post:
 *     summary: Create a new message
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Message'
 *     responses:
 *       201:
 *         description: Message created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/MessageDTO'
 *       400:
 *         description: Message must exist in request body
 */
router.post('/messages', async (request: Request, response: Response<MessageDTO>) => {
    const message = getMessageFromRequestBody(request);
    const messageDTO: MessageDTO = await insertMessageToDatabase(message);
    response.status(201).json(messageDTO);
});

/**
 * @swagger
 * /messages/{id}:
 *   patch:
 *     summary: Update a message by ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: The message ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Message'
 *     responses:
 *       200:
 *         description: The updated message
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/MessageDTO'
 *       400:
 *         description: Message must exist in request body. ID must exist or be a number
 *       404:
 *         description: Message not found
 */
router.patch('/messages/:id', async (request, response: Response<MessageDTO>) => {
    const id = getIdFromRequest(request);
    const message = getMessageFromRequestBody(request);
    const existingMessage = await getMessageFromDatabase(id);
    if (!existingMessage) {
        const error = new Error(`Message with id ${id} not found.`);
        (error as any).status = 404;
        throw error;
    }

    const messageDTO: MessageDTO = await updateMessageInDatabase(id, message);
    response.json(messageDTO);
});

/**
 * @swagger
 * /messages/{id}:
 *   delete:
 *     summary: Delete a message by ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: The message ID
 *     responses:
 *       200:
 *         description: The deleted message
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/MessageDTO'
 *       400:
 *         description: ID must exist or be a number
 *       404:
 *         description: Message not found
 */
router.delete('/messages/:id', async (request, response: Response<MessageDTO>) => {
    const id = getIdFromRequest(request);
    const existingMessage = await getMessageFromDatabase(id);
    if (!existingMessage) {
        const error = new Error(`Message with id ${id} not found.`);
        (error as any).status = 404;
        throw error;
    }

    const messageDTO: MessageDTO = await deleteMessageFromDatabase(id);
    response.json(messageDTO);
});

/**
 * @swagger
 * /messages:
 *   get:
 *     summary: Get all messages
 *     responses:
 *       200:
 *         description: List of messages
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/MessageDTO'
 */
router.get('/messages', async (_request: Request, response: Response<MessageDTO[]>) => {
    const messageDTOs: MessageDTO[] = await getMessagesFromDatabase();
    response.json(messageDTOs);
});

export default router;
